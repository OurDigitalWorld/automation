
# Adapted from:
# https://github.com/resque/resque/blob/1-x-stable/examples/god/resque.god

{% for queue in worker_queues %}

{{ queue.num_workers }}.times do |num|
  God.watch do |w|
    w.dir      = '/opt/heidrun'
    w.name     = "resque-{{ queue.name }}-#{num}"
    w.group    = '{{ queue.name }}'
    w.interval = 30.seconds
    # Please note that god wants the keys of w.env to be strings, not symbols.
    w.env      = {
      'PATH' => '/home/dpla/.rbenv/shims:/home/dpla/.rbenv/bin:/usr/local/bin:/usr/bin:/bin',
      'QUEUE' => '{{ queue.name }}',
      'RAILS_ENV' => '{{ rails_env }}',
      'HOME' => '/home/dpla'
    }
    w.start    = "bundle exec rake environment resque:work"
    w.log      = '/opt/heidrun/log/worker.log'

    # see https://github.com/resque/resque/tree/1-x-stable#signals
    w.stop_signal = 'QUIT'
    w.stop_timeout = 2.minutes

    w.uid = 'dpla'
    w.gid = 'dpla'

    # restart if memory gets too high
    #
    # TODO:  What is too high?
    #
    # w.transition(:up, :restart) do |on|
    #   on.condition(:memory_usage) do |c|
    #     c.above = 350.megabytes
    #     c.times = 2
    #   end
    # end

    # determine the state on startup
    w.transition(:init, { true => :up, false => :start }) do |on|
      on.condition(:process_running) do |c|
        c.running = true
      end
    end

    # determine when process has finished starting
    w.transition([:start, :restart], :up) do |on|
      on.condition(:process_running) do |c|
        c.running = true
        c.interval = 5.seconds
      end

      # failsafe
      on.condition(:tries) do |c|
        c.times = 5
        c.transition = :start
        c.interval = 5.seconds
      end
    end

    # start if process is not running
    w.transition(:up, :start) do |on|
      on.condition(:process_running) do |c|
        c.running = false
      end
    end
  end
end

{% endfor %}
